image: docker:latest

services:
  - docker:18.06-dind

variables:
  GIT_SSL_NO_VERIFY: "true"
  IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG

stages:
  - test
  - analyze
  - build

outdated:
  stage: test
  image: node:8.16
  tags:
    - ortolang-docker-bind
  script:
    - npm install
    - npm outdated -l || true
  only:
    - schedules

container_scanning:
  stage: test
  image: docker:18.06
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    # Defining two new variables based on GitLab's CI/CD predefined variables
    # https://docs.gitlab.com/ee/ci/variables/#predefined-environment-variables
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
    CI_APPLICATION_TAG: master
    # Prior to this, you need to have the Container Registry running for your project and setup a build job
    # with at least the following steps:
    #
    # docker build -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG .
    # docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    #
    # Container Scanning deals with Docker images only so no need to import the project's Git repository:
    GIT_STRATEGY: none
    # Services and containers running in the same Kubernetes pod are all sharing the same localhost address
    # https://docs.gitlab.com/runner/executors/kubernetes.html
    # DOCKER_SERVICE: localhost
    # DOCKER_HOST: tcp://${DOCKER_SERVICE}:2375/
    # https://hub.docker.com/r/arminc/clair-local-scan/tags
    CLAIR_LOCAL_SCAN_VERSION: v2.0.8_0ed98e9ead65a51ba53f7cc53fa5e80c92169207
    CLAIR_EXECUTABLE_VERSION: v12
    ## Disable the proxy for clair-local-scan, otherwise Container Scanning will
    ## fail when a proxy is used.
    NO_PROXY: ${DOCKER_SERVICE},localhost
  allow_failure: true
  tags:
    - ortolang-docker-bind
  script:
    - |
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials..."
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
        echo ""
      fi
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:${CLAIR_LOCAL_SCAN_VERSION}
    - apk add -U wget ca-certificates
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/${CLAIR_EXECUTABLE_VERSION}/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - retries=0
    - CLAIR_SERVICE_IP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' clair`
    - echo ${CLAIR_SERVICE_IP}
    - LOCAL_IP=`ip route|awk '/src/ { print  $7}'`
    - echo ${LOCAL_IP}
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://${CLAIR_SERVICE_IP}:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    # - sleep 30s
    - ./clair-scanner -c http://${CLAIR_SERVICE_IP}:6060 --ip ${LOCAL_IP} -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
  artifacts:
      paths: [gl-container-scanning-report.json]
  only:
    - schedules

test:
  stage: test
  image: node:8.16
  tags:
    - ortolang-docker-bind
  script:
    - npm install
    - npm test
  except:
    - tags
    - schedules

dependency_scanning:
  stage: test
  image: 
    name: owasp/dependency-check
    entrypoint: [""]
  tags:
    - ortolang-docker-bind
  allow_failure: true
  script:
    - mkdir -p reports/dependency-check
    - /usr/share/dependency-check/bin/dependency-check.sh -s . --format 'ALL' --data /tmp/data --out reports/dependency-check/
  artifacts:
    paths:
      - reports/dependency-check/
  only:
    - master
  except:
    - schedules

analyze:
  stage: analyze
  image: registry2.atilf.fr/atilf/sonarqube-scanner:1.1.0
  tags:
    - ortolang-docker-bind
  allow_failure: true
  script:
    - /sonar/sonar-scanner-cli/bin/sonar-scanner
  dependencies:
    - dependency_scanning
  only:
    - master
  except:
    - schedules

docker_build:
  stage: build
  tags:
    - ortolang-docker-bind
  script:
    - docker build --rm -f Dockerfile -t $IMAGE_NAME .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $IMAGE_NAME
  only: 
    - master
    - tags
    - 3-recherche-globale
  except:
    - schedules
